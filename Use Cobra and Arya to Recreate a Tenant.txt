##### Task 1 - full script

import requests

from credentials import *
from sys import argv
from cobra.mit.session import LoginSession
from cobra.mit.access import MoDirectory

# Disable warnings for insecure certificates (self-signed)
requests.packages.urllib3.disable_warnings(
    category=requests.packages.urllib3.exceptions.InsecureRequestWarning 
)

# Argument handling
if len(argv) != 2:
    print('Please provide exactly one parameter: the Tenant name!') 
    exit() 

tenant_name = argv[1]
print('Checking the APIC for tenant {}'.format(tenant_name))

# Login
session = LoginSession(APIC_HOST, APIC_USERNAME, APIC_PASSWORD)
moDir = MoDirectory(session)
moDir.login()

# Tenant lookup by DN
tenant = moDir.lookupByDn('uni/tn-{}'.format(tenant_name))

if tenant:
    print('Found tenant {} with DN: {}'.format(tenant_name, tenant.dn)) 
else:
    print('Tenant {} does not exist!'.format(tenant_name))

# Task 2

from credentials import *
from cobra.mit.session import LoginSession
from cobra.mit.access import MoDirectory
from cobra.mit.request import ClassQuery

import requests

# Disable warnings for insecure certificates (self-signed)
requests.packages.urllib3.disable_warnings(
    category=requests.packages.urllib3.exceptions.InsecureRequestWarning 
)

# Login
session = LoginSession(APIC_HOST, APIC_USERNAME, APIC_PASSWORD)
moDir = MoDirectory(session)
moDir.login()

############################

epgs_query = ClassQuery('fvAEPg')
epgs = moDir.query(epgs_query)

# Print all EPGs objects returned by the query
print('fvAEPg class query returned {} EPGs total.'.format(len(epgs)))
for epg in epgs:
    print('Name: {:20} DN: {}'.format(epg.name, epg.dn)) 

print('\n')

#######################

# Fabric Node query
fabric_query = ClassQuery('fabricNode')
nodes = moDir.query(fabric_query)

# Print all the node objects returned by the query
print('fabricNode class query returned {} nodes total.'.format(len(nodes)))
for node in nodes:
    print('Name: {:20} Role: {:20} DN: {}'.format(node.name, node.role, node.dn))

###########################

# Propery filter
print('\nAdding filter to only query for leaf nodes.\n')

fabric_query.propFilter = 'eq(fabricNode.role,"leaf")'
# You can confirm the final query options by looking at fabric_query.options
# and compile the full query URL as you would write it in Postman for example
print('The final query is: {}'.format(fabric_query.getUrl(session)))
# Run the query against the API
nodes = moDir.query(fabric_query)

# Print all the node objects returned by the query
print('fabricNode class query returned {} nodes total.'.format(len(nodes)))
for node in nodes:
    print('Name: {:20} Role: {:20} DN: {}'.format(node.name, node.role, node.dn))


# Task 3

from cobra.mit.session import LoginSession
from cobra.mit.access import MoDirectory

#######################

session = LoginSession(APIC_HOST, APIC_USERNAME, APIC_PASSWORD)
moDir = MoDirectory(session)
moDir.login()

#################################

# Tenant lookup by DN
tenant = moDir.lookupByDn('uni/tn-{}'.format(tenant_name))

if tenant:
    print('Found tenant {} with DN: {}'.format(tenant_name, tenant.dn)) 
else:
    print('Tenant {} does not exist!'.format(tenant_name))

###############################################

# Task 4

from cobra.mit.request import ClassQuery

################################

epgs_query = ClassQuery('fvAEPg')
epgs = moDir.query(epgs_query)

# Print all EPGs objects returned by the query
print('fvAEPg class query returned {} EPGs total.'.format(len(epgs)))
for epg in epgs:
    print('Name: {:20} DN: {}'.format(epg.name, epg.dn)) 

######################################

# Fabric Node query
fabric_query = ClassQuery('fabricNode')
nodes = moDir.query(fabric_query)

# Print all the node objects returned by the query
print('fabricNode class query returned {} nodes total.'.format(len(nodes)))
for node in nodes:
    print('Name: {:20} Role: {:20} DN: {}'.format(node.name, node.role, node.dn))

############################################################

# Propery filter
print('\nAdding filter to only query for leaf nodes.\n')

fabric_query.propFilter = 'eq(fabricNode.role,"leaf")'
# You can confirm the final query options by looking at fabric_query.options
# and compile the full query URL as you would write it in Postman for example
print('The final query is: {}'.format(fabric_query.getUrl(session)))
# Run the query against the API
nodes = moDir.query(fabric_query)

# Print all the node objects returned by the query
print('fabricNode class query returned {} nodes total.'.format(len(nodes)))
for node in nodes:
    print('Name: {:20} Role: {:20} DN: {}'.format(node.name, node.role, node.dn))


