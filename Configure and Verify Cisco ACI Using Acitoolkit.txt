task#1:

from acitoolkit.acitoolkit import Tenant, Session

session = Session(APIC_HOST, APIC_USERNAME, APIC_PASSWORD)

session.login()

tenants = Tenant.get(session)

print("All configured tenants on {}".format(APIC_HOST))
for tenant in tenants:
    print(tenant.name)

#########################################
task 2:


import json
from sys import exit
from credentials import *
from acitoolkit.acitoolkit import Session, Tenant, Context, BridgeDomain, Subnet

def as_dict(object_list):
    # Helper function to create a name-indexed dictionary 
    # from a list of objects returned by acitoolkit get functions 
    objects_dict = {} 
    for obj in object_list: 
        objects_dict[obj.name] = obj 
    return objects_dict

tenant_name = "Sales"
vrf_name = "Presales_VRF"
bridge_domain_name = "Presales_BD"

session = Session(APIC_HOST, APIC_USERNAME, APIC_PASSWORD)
session.login()

tenants = as_dict(Tenant.get(session))

print(f'All tenants: {tenants.keys()}')

if tenants.get(tenant_name) is None:
    print(f'Couldn\'t find tenant {tenant_name} on the APIC.') 
    exit(1)

tenant = tenants.get(tenant_name)
print(f'Tenant {tenant.name} exists with DN {tenant.dn}!')

vrfs = as_dict(Context.get(session, tenant))

if vrf_name in vrfs:
    print(f'{vrf_name} exists with DN {vrfs[vrf_name].dn}.') 
else:
    print(f'Couldn\'t find VRF {vrf_name} under tenant {tenant.name}.')

bridge_domains = as_dict(BridgeDomain.get(session, tenant))
if bridge_domain_name in bridge_domains:
    bd = bridge_domains[bridge_domain_name] 
    print(f'{bd.name} exists with DN {bd.dn}.') 
    print('It has the following subnets:') 

    for subnet in Subnet.get(session, bd, tenant): 
        print(subnet.get_addr()) 
else:
    print(f'Couldn\'t find BD {bridge_domain_name} under tenant {tenant.name}.')

#########################################
task 3:

import json 
from sys import exit
from credentials import *
from acitoolkit.acitoolkit import *

tenant_name = "Marketing"
vrf_name = "Marketing_VRF"
bridge_domain_name = "Marketing_BD"
bridge_domain_subnet = "20.23.21.1/24"
bridge_domain_subnet_name = "Marketing_Subnet"
app_prof_name = "Marketing_APP"
epg_portal_name = "Portal_EPG"
epg_users_name = "Users_EPG"

# Create Tenant
tenant = Tenant(tenant_name)

# Create VRF
vrf = Context(vrf_name, tenant)

# Create Bridge Domain
bridge_domain = BridgeDomain(bridge_domain_name, tenant)
bridge_domain.add_context(vrf)

# Create public subnet and assign gateway
subnet = Subnet(bridge_domain_subnet_name, bridge_domain)
subnet.set_scope("public")
subnet.set_addr(bridge_domain_subnet)

# Create http filter and filter entry
filter_http = Filter("http", tenant)
filter_entry_tcp80 = FilterEntry(
    "tcp-80", filter_http, etherT="ip", prot="tcp", dFromPort="http", dToPort="http"
)

# Create Portal contract and use http filter
contract_portal = Contract("Portal", tenant)
contract_subject_http = ContractSubject("http", contract_portal)
contract_subject_http.add_filter(filter_http)

# Create Application Profile
app_profile = AppProfile(app_prof_name, tenant)

# Create Portal EPG and associate bridge domain and contracts
epg_portal = EPG(epg_portal_name, app_profile)
epg_portal.add_bd(bridge_domain)
epg_portal.provide(contract_portal)

# Create Users EPG and associate bridge domain and contracts
epg_users = EPG(epg_users_name, app_profile)
epg_users.add_bd(bridge_domain)
epg_users.consume(contract_portal)

# Delete Tenant